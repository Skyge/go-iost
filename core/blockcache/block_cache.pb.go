// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/blockcache/block_cache.proto

package blockcache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BcMessageType int32

const (
	BcMessageType_LinkType    BcMessageType = 0
	BcMessageType_SetRootType BcMessageType = 1
)

var BcMessageType_name = map[int32]string{
	0: "LinkType",
	1: "SetRootType",
}
var BcMessageType_value = map[string]int32{
	"LinkType":    0,
	"SetRootType": 1,
}

func (x BcMessageType) String() string {
	return proto.EnumName(BcMessageType_name, int32(x))
}
func (BcMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_block_cache_cfcbe2379db3569c, []int{0}
}

type BcMessage struct {
	Data                 []byte        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type                 BcMessageType `protobuf:"varint,2,opt,name=type,proto3,enum=blockcache.BcMessageType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BcMessage) Reset()         { *m = BcMessage{} }
func (m *BcMessage) String() string { return proto.CompactTextString(m) }
func (*BcMessage) ProtoMessage()    {}
func (*BcMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_cache_cfcbe2379db3569c, []int{0}
}
func (m *BcMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BcMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcMessage.Merge(dst, src)
}
func (m *BcMessage) XXX_Size() int {
	return m.Size()
}
func (m *BcMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BcMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BcMessage proto.InternalMessageInfo

func (m *BcMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BcMessage) GetType() BcMessageType {
	if m != nil {
		return m.Type
	}
	return BcMessageType_LinkType
}

type BlockCacheRaw struct {
	BlockBytes           []byte       `protobuf:"bytes,1,opt,name=blockBytes,proto3" json:"blockBytes,omitempty"`
	WitnessList          *WitnessList `protobuf:"bytes,2,opt,name=witnessList" json:"witnessList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BlockCacheRaw) Reset()         { *m = BlockCacheRaw{} }
func (m *BlockCacheRaw) String() string { return proto.CompactTextString(m) }
func (*BlockCacheRaw) ProtoMessage()    {}
func (*BlockCacheRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_cache_cfcbe2379db3569c, []int{1}
}
func (m *BlockCacheRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockCacheRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockCacheRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockCacheRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCacheRaw.Merge(dst, src)
}
func (m *BlockCacheRaw) XXX_Size() int {
	return m.Size()
}
func (m *BlockCacheRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCacheRaw.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCacheRaw proto.InternalMessageInfo

func (m *BlockCacheRaw) GetBlockBytes() []byte {
	if m != nil {
		return m.BlockBytes
	}
	return nil
}

func (m *BlockCacheRaw) GetWitnessList() *WitnessList {
	if m != nil {
		return m.WitnessList
	}
	return nil
}

type WitnessList struct {
	ActiveWitnessList    []string                `protobuf:"bytes,1,rep,name=activeWitnessList" json:"activeWitnessList,omitempty"`
	PendingWitnessList   []string                `protobuf:"bytes,2,rep,name=pendingWitnessList" json:"pendingWitnessList,omitempty"`
	PendingWitnessNumber int64                   `protobuf:"varint,3,opt,name=pendingWitnessNumber,proto3" json:"pendingWitnessNumber,omitempty"`
	WitnessInfo          map[string]*WitnessInfo `protobuf:"bytes,4,rep,name=witnessInfo" json:"witnessInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WitnessList) Reset()         { *m = WitnessList{} }
func (m *WitnessList) String() string { return proto.CompactTextString(m) }
func (*WitnessList) ProtoMessage()    {}
func (*WitnessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_cache_cfcbe2379db3569c, []int{2}
}
func (m *WitnessList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WitnessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessList.Merge(dst, src)
}
func (m *WitnessList) XXX_Size() int {
	return m.Size()
}
func (m *WitnessList) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessList.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessList proto.InternalMessageInfo

func (m *WitnessList) GetActiveWitnessList() []string {
	if m != nil {
		return m.ActiveWitnessList
	}
	return nil
}

func (m *WitnessList) GetPendingWitnessList() []string {
	if m != nil {
		return m.PendingWitnessList
	}
	return nil
}

func (m *WitnessList) GetPendingWitnessNumber() int64 {
	if m != nil {
		return m.PendingWitnessNumber
	}
	return 0
}

func (m *WitnessList) GetWitnessInfo() map[string]*WitnessInfo {
	if m != nil {
		return m.WitnessInfo
	}
	return nil
}

type WitnessInfo struct {
	Loc                  string   `protobuf:"bytes,1,opt,name=Loc,proto3" json:"Loc,omitempty"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	NetID                string   `protobuf:"bytes,3,opt,name=NetID,proto3" json:"NetID,omitempty"`
	Online               bool     `protobuf:"varint,4,opt,name=Online,proto3" json:"Online,omitempty"`
	Score                int64    `protobuf:"varint,5,opt,name=Score,proto3" json:"Score,omitempty"`
	Votes                int64    `protobuf:"varint,6,opt,name=Votes,proto3" json:"Votes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WitnessInfo) Reset()         { *m = WitnessInfo{} }
func (m *WitnessInfo) String() string { return proto.CompactTextString(m) }
func (*WitnessInfo) ProtoMessage()    {}
func (*WitnessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_block_cache_cfcbe2379db3569c, []int{3}
}
func (m *WitnessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WitnessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessInfo.Merge(dst, src)
}
func (m *WitnessInfo) XXX_Size() int {
	return m.Size()
}
func (m *WitnessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessInfo proto.InternalMessageInfo

func (m *WitnessInfo) GetLoc() string {
	if m != nil {
		return m.Loc
	}
	return ""
}

func (m *WitnessInfo) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *WitnessInfo) GetNetID() string {
	if m != nil {
		return m.NetID
	}
	return ""
}

func (m *WitnessInfo) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *WitnessInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *WitnessInfo) GetVotes() int64 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func init() {
	proto.RegisterType((*BcMessage)(nil), "blockcache.bcMessage")
	proto.RegisterType((*BlockCacheRaw)(nil), "blockcache.BlockCacheRaw")
	proto.RegisterType((*WitnessList)(nil), "blockcache.WitnessList")
	proto.RegisterMapType((map[string]*WitnessInfo)(nil), "blockcache.WitnessList.WitnessInfoEntry")
	proto.RegisterType((*WitnessInfo)(nil), "blockcache.WitnessInfo")
	proto.RegisterEnum("blockcache.BcMessageType", BcMessageType_name, BcMessageType_value)
}
func (m *BcMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockCacheRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockCacheRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BlockBytes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(len(m.BlockBytes)))
		i += copy(dAtA[i:], m.BlockBytes)
	}
	if m.WitnessList != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(m.WitnessList.Size()))
		n1, err := m.WitnessList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WitnessList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActiveWitnessList) > 0 {
		for _, s := range m.ActiveWitnessList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PendingWitnessList) > 0 {
		for _, s := range m.PendingWitnessList {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.PendingWitnessNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(m.PendingWitnessNumber))
	}
	if len(m.WitnessInfo) > 0 {
		for k, _ := range m.WitnessInfo {
			dAtA[i] = 0x22
			i++
			v := m.WitnessInfo[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBlockCache(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBlockCache(uint64(len(k))) + msgSize
			i = encodeVarintBlockCache(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlockCache(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBlockCache(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WitnessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Loc) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(len(m.Loc)))
		i += copy(dAtA[i:], m.Loc)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.NetID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(len(m.NetID)))
		i += copy(dAtA[i:], m.NetID)
	}
	if m.Online {
		dAtA[i] = 0x20
		i++
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Score != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(m.Score))
	}
	if m.Votes != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlockCache(dAtA, i, uint64(m.Votes))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBlockCache(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BcMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBlockCache(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBlockCache(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockCacheRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockBytes)
	if l > 0 {
		n += 1 + l + sovBlockCache(uint64(l))
	}
	if m.WitnessList != nil {
		l = m.WitnessList.Size()
		n += 1 + l + sovBlockCache(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WitnessList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveWitnessList) > 0 {
		for _, s := range m.ActiveWitnessList {
			l = len(s)
			n += 1 + l + sovBlockCache(uint64(l))
		}
	}
	if len(m.PendingWitnessList) > 0 {
		for _, s := range m.PendingWitnessList {
			l = len(s)
			n += 1 + l + sovBlockCache(uint64(l))
		}
	}
	if m.PendingWitnessNumber != 0 {
		n += 1 + sovBlockCache(uint64(m.PendingWitnessNumber))
	}
	if len(m.WitnessInfo) > 0 {
		for k, v := range m.WitnessInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBlockCache(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBlockCache(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBlockCache(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WitnessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Loc)
	if l > 0 {
		n += 1 + l + sovBlockCache(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovBlockCache(uint64(l))
	}
	l = len(m.NetID)
	if l > 0 {
		n += 1 + l + sovBlockCache(uint64(l))
	}
	if m.Online {
		n += 2
	}
	if m.Score != 0 {
		n += 1 + sovBlockCache(uint64(m.Score))
	}
	if m.Votes != 0 {
		n += 1 + sovBlockCache(uint64(m.Votes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBlockCache(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlockCache(x uint64) (n int) {
	return sovBlockCache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BcMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: bcMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: bcMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (BcMessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockCacheRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockCacheRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockCacheRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockBytes = append(m.BlockBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockBytes == nil {
				m.BlockBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessList == nil {
				m.WitnessList = &WitnessList{}
			}
			if err := m.WitnessList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveWitnessList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveWitnessList = append(m.ActiveWitnessList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingWitnessList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingWitnessList = append(m.PendingWitnessList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingWitnessNumber", wireType)
			}
			m.PendingWitnessNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingWitnessNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessInfo == nil {
				m.WitnessInfo = make(map[string]*WitnessInfo)
			}
			var mapkey string
			var mapvalue *WitnessInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlockCache
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlockCache
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlockCache
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlockCache
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBlockCache
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBlockCache
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WitnessInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlockCache(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlockCache
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WitnessInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlockCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlockCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockCache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockCache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlockCache
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlockCache
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlockCache(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlockCache = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockCache   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("core/blockcache/block_cache.proto", fileDescriptor_block_cache_cfcbe2379db3569c)
}

var fileDescriptor_block_cache_cfcbe2379db3569c = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xc6, 0x4e, 0x54, 0x8f, 0x5b, 0x30, 0xa3, 0x0a, 0x0c, 0x07, 0xcb, 0xf8, 0x64, 0x21,
	0x6a, 0x24, 0x73, 0x01, 0x8e, 0x01, 0x0e, 0x45, 0x26, 0x48, 0x5b, 0x20, 0x47, 0x64, 0x6f, 0x97,
	0x62, 0x12, 0x76, 0x2d, 0x7b, 0xdb, 0xca, 0xcf, 0xc0, 0x0b, 0xf0, 0x40, 0x1c, 0x38, 0xf2, 0x08,
	0x28, 0xbc, 0x08, 0xda, 0x75, 0x7e, 0x1c, 0x08, 0xbd, 0x7d, 0xf3, 0x7d, 0xdf, 0xcc, 0x68, 0x46,
	0x1f, 0xdc, 0x67, 0xb2, 0xe6, 0x8f, 0x8a, 0xb9, 0x64, 0x33, 0x96, 0xb3, 0x4f, 0x4b, 0xf8, 0xc1,
	0xe0, 0xa4, 0xaa, 0xa5, 0x92, 0x08, 0x1b, 0x35, 0x9a, 0x80, 0x53, 0xb0, 0xd7, 0xbc, 0x69, 0xf2,
	0x73, 0x8e, 0x08, 0xf6, 0x59, 0xae, 0x72, 0x9f, 0x84, 0x24, 0x3e, 0xa0, 0x06, 0xe3, 0x31, 0xd8,
	0xaa, 0xad, 0xb8, 0x3f, 0x08, 0x49, 0x7c, 0x23, 0xbd, 0x9b, 0x6c, 0x7a, 0x93, 0x75, 0xe3, 0xdb,
	0xb6, 0xe2, 0xd4, 0xd8, 0xa2, 0xcf, 0x70, 0x38, 0xd6, 0x8e, 0xe7, 0xda, 0x41, 0xf3, 0x2b, 0x0c,
	0xa0, 0x5b, 0x37, 0x6e, 0x15, 0x6f, 0x96, 0x93, 0x7b, 0x0c, 0x3e, 0x05, 0xf7, 0xaa, 0x54, 0x82,
	0x37, 0x4d, 0x56, 0x36, 0xca, 0xac, 0x71, 0xd3, 0x3b, 0xfd, 0x35, 0xd3, 0x8d, 0x4c, 0xfb, 0xde,
	0xe8, 0xfb, 0x00, 0xdc, 0x9e, 0x88, 0x0f, 0xe1, 0x56, 0xce, 0x54, 0x79, 0xc9, 0x7b, 0xa4, 0x4f,
	0x42, 0x2b, 0x76, 0xe8, 0xbf, 0x02, 0x26, 0x80, 0x15, 0x17, 0x67, 0xa5, 0x38, 0x9f, 0x6e, 0xed,
	0xd7, 0xf6, 0x1d, 0x0a, 0xa6, 0x70, 0xb4, 0xcd, 0x4e, 0x2e, 0xbe, 0x14, 0xbc, 0xf6, 0xad, 0x90,
	0xc4, 0x16, 0xdd, 0xa9, 0xe1, 0xab, 0xf5, 0x71, 0x27, 0xe2, 0xa3, 0xf4, 0xed, 0xd0, 0x8a, 0xdd,
	0x34, 0xfe, 0xcf, 0x71, 0x2b, 0xac, 0xad, 0x2f, 0x85, 0xaa, 0x5b, 0xda, 0x6f, 0xbe, 0x37, 0x05,
	0xef, 0x6f, 0x03, 0x7a, 0x60, 0xcd, 0x78, 0x6b, 0xbe, 0xea, 0x50, 0x0d, 0xf1, 0x18, 0x86, 0x97,
	0xf9, 0xfc, 0x82, 0x5f, 0xf3, 0x48, 0xdd, 0x4e, 0x3b, 0xd7, 0xb3, 0xc1, 0x13, 0x12, 0x7d, 0x25,
	0xeb, 0x37, 0x6a, 0x49, 0x0f, 0xcd, 0x24, 0x5b, 0x0d, 0xcd, 0x24, 0xd3, 0xcc, 0x3b, 0x9a, 0x99,
	0x91, 0x0e, 0xd5, 0x10, 0x8f, 0x60, 0x38, 0xe1, 0xea, 0xe4, 0x85, 0xb9, 0xde, 0xa1, 0x5d, 0x81,
	0xb7, 0x61, 0xf4, 0x46, 0xcc, 0x4b, 0xc1, 0x7d, 0x3b, 0x24, 0xf1, 0x3e, 0x5d, 0x56, 0xda, 0x7d,
	0xaa, 0x63, 0xe9, 0x0f, 0xcd, 0xaf, 0xba, 0x42, 0xb3, 0xef, 0xa5, 0x0e, 0xc5, 0xa8, 0x63, 0x4d,
	0xf1, 0x20, 0x81, 0xc3, 0xad, 0x5c, 0xe1, 0x01, 0xec, 0x67, 0xa5, 0x98, 0x69, 0xec, 0xed, 0xe1,
	0x4d, 0x70, 0x4f, 0xb9, 0xa2, 0x52, 0x2a, 0x43, 0x90, 0xb1, 0xf7, 0x63, 0x11, 0x90, 0x9f, 0x8b,
	0x80, 0xfc, 0x5a, 0x04, 0xe4, 0xdb, 0xef, 0x60, 0xaf, 0x18, 0x99, 0x94, 0x3f, 0xfe, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x44, 0x14, 0x0e, 0xf9, 0x0a, 0x03, 0x00, 0x00,
}
